import sys
import uuid
from .agents.user_input_agent import UserInputAgent
from .agents.command_agent import CommandAgent
from .agents.pentest_agent import PentestAgent
from openai import OpenAI
from rich.console import Console
from rich.panel import Panel
from rich.style import Style
from rich.text import Text
from prompt_toolkit import print_formatted_text
from prompt_toolkit.formatted_text import FormattedText
import os
from dotenv import load_dotenv

# Initialize OpenAI API client
load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))


# Directory to store the data
DATA_DIR = "./logs/"

console = Console()

user_agent = UserInputAgent(data_dir=DATA_DIR)


def main():
    Console().clear()

    while True:
        # Generate a unique task ID
        task_id = str(uuid.uuid4())

        # Initialize the agents
        user_agent.set_task_id(task_id)
        pentest_agent = PentestAgent(client=client, data_dir=DATA_DIR, task_id=task_id)
        command_agent = CommandAgent(data_dir=DATA_DIR, task_id=task_id)

        # Get user input
        task = user_agent.get_task()
        if not task:
            sys.exit()

        # Process the task, handle ctrl+c to stop the process and go back to user input
        try:
            pentest_agent.set_task(task)
            while True:
                try:
                    # Generate a thought about next step
                    thought = pentest_agent.generate_thought()
                    # Generate an action (command line code) based on the thought
                    action, status = pentest_agent.determine_next_action(thought)
                    if status=='success':
                        console.print("I have successfully completed the task. Below is a summary of the steps taken:\n", style="green")
                        # Generate a summary of the steps taken
                        pentest_agent.generate_summary(success=True)
                        break
                    elif status=='failure':
                            console.print("Unfortunately, I couldn't complete the task successfully, and I'm uncertain about the next step. To assist further, please provide additional details about the task, or allow me to attempt it again. Below are the steps I've undertaken so far:\n", style="red")
                            # Generate a summary of the steps tried
                            pentest_agent.generate_summary(success=False)
                            response_style = Style(color="yellow", bold=True)
                            prompt_text = Text("\nWould you like me to try again? [yes/no] ", style=response_style)
                            response = console.input(prompt_text)
                            response = (response.strip().lower()) if response else "no"
                            if response == 'yes':
                                # Generate a new task ID
                                task_id = str(uuid.uuid4())
                                pentest_agent = PentestAgent(client=client, data_dir=DATA_DIR, task_id=task_id)
                                command_agent = CommandAgent(data_dir=DATA_DIR, task_id=task_id)

                                # Rerun the previous user input
                                task = user_agent.get_last_task()
                                pentest_agent.set_task(task)
                                continue
                            else:
                                break                    
                    else:
                        # Execute the action
                        execution_response = command_agent.execute_action(action)

                        # Print the output
                        if len(execution_response['output']) > 0:
                            # You can use a Panel for large outputs
                            if len(execution_response['output']) > 1000:
                                execution_response['output'] = execution_response['output'][:500] + "\n\n...\n\n" + execution_response['output'][-500:]
                            console.print(Text("System Output", style="bold magenta"))
                            output_panel = Panel(execution_response['output'], expand=False, border_style="magenta")
                            console.print(output_panel)
                        if len(execution_response['error']) > 0:
                            if len(execution_response['error']) > 1000:
                                execution_response['error'] = execution_response['error'][:500] + "\n\n...\n\n" + execution_response['error'][-500:]
                            console.print(Text("System Error", style="bold red"))
                            error_panel = Panel(execution_response['error'], expand=False, border_style="red")
                            console.print(error_panel)                        

                        # Save the result
                        command_agent.save_result(execution_response)
                except KeyboardInterrupt:
                    print_formatted_text(FormattedText([("bold yellow", "\nGeneration stopped. Please input additional feedback to the AI.")]))
                    feedback = user_agent.get_additional_feedback()
                    if feedback:
                        continue
                    else:
                        break
        except KeyboardInterrupt:
            print_formatted_text(FormattedText([("bold yellow", "\nGeneration stopped. Going back to user input.")]))
            continue


if __name__ == "__main__":
    main()